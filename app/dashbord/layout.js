'use client'
import { Inter } from "next/font/google";
import { useState } from "react";
import { ArrowRight, ChevronRight, DownloadCloud, House, Menu } from "lucide-react";
import SideBar from "./sideBar/SideBar";
import { saveAs } from 'file-saver';
import apis from "../utils/apis";
import { jwtDecode } from "jwt-decode";
import { useRouter } from "next/navigation";


const inter = Inter({ subsets: ["latin"] });

 const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({ children }) {
   if(!localStorage?.getItem('token')) {
    
    return useRouter().push("/signin")
    }else{
  const [menuOpen,setMenuOpen]=useState(false)
  const [change,setChange]=useState(false)
  const [topHead,setTopHead]=useState(40)
  const [countmsg,setCountmsg]=useState(0);
  const menuHandle=()=>{
    setMenuOpen(!menuOpen)
  }
  if(localStorage?.getItem("token")){
  apis.tkn(),
apis.getNofificationsNotReading().then(res=>{
  console.log("notif",res?.data)
  setCountmsg(res?.data)
})}
  console.log("countcount: ",countmsg)
  const changeMenu=()=>{
    setTopHead(40-document.getElementById('content').scrollTop)
  //  console.log(document.getElementById('content').scrollTop,topHead)
    if (document.getElementById('content').scrollTop <30) {
      setChange(false)
    } else if(document.getElementById('content').scrollTop >=56){
      setChange(true)
    }
  }


  const handleDownload = async () => {
    try {
      // Appel pour récupérer l'image
      const response = await apis.gettimeTable();
      const imageUrl = response?.data; // L'URL de l'image
  
      if (imageUrl) {
        // Créez un blob depuis l'URL si nécessaire
        const blob = await fetch(imageUrl).then(res => res.blob());
  
        // Utilisez FileSaver.js pour sauvegarder l'image
        saveAs(blob, 'emplois_du_temps-image.png'); // Téléchargez l'image
      } else {
        console.log('Erreur: URL d\'image invalide');
      }
    } catch (error) {
      console.error('Erreur lors de la récupération ou du téléchargement de l\'image :', error);
    }
  };
  
   let route=document.location.href.split('/')
   route=route.slice(4,)
  
  return (
    
      <div className={inter.className} >
      <div className="flex h-screen bg-gray-100">
    <div className='hidden lg:flex'><SideBar /></div>  
      <div className=' z-40 lg:z-auto absolute lg:hidden transition-[left] ease-in-out delay-100' style={menuOpen?{left:0}:{left:'-100%'}}>  <SideBar /> </div>
    <div className='rotate-180 flex absolute  top-6 z-50  lg:hidden transition-[left] ease-in-out delay-100' style={menuOpen?{left:'200px'}:{left:'-100%'}}> <ArrowRight onClick={menuHandle}/></div>
    
      <div className="flex flex-col overflow-auto w-[100%] " id="content" onScroll={changeMenu}>
        {/* Header */}
        <header className="bg-white p-4 shadow-sm  border-b-2 border-solid border-gray-200 h-[75px]" >
          <div className="flex items-center justify-between flex-row">
          <div className="flex flex-row items-center  overflow-x-auto whitespace-nowrap hidden lg:flex ">
        <div><House/></div>  
             {route.map((item,index)=>(
              <div className="flex flex-row gap-1 shadow-md shadow-gray-100" key={index}>
            <ChevronRight/>
            <p>{item}</p>
           </div>
            ))} 

            </div>
            
            <div className="flex  items-center  -mx-2 lg:hidden">
            {jwtDecode(localStorage.getItem('token'))?.profil?<img className="object-cover w-10 h-10 mx-2 rounded-full" src={jwtDecode(localStorage.getItem('token'))?.profil} alt="avatar" />
:
          <div className="w-10 h-10 min-w-10 min-h-10  bg-gray-200 rounded-full flex items-center justify-center text-gray-500 font-medium">
            {jwtDecode(localStorage.getItem('token'))?.name?.charAt(0).toUpperCase()}
          </div>
    }
        
      {change==false?<div className=" w-6 h-6 bg-white absolute  left-[32px]  rounded-full shadow-md border-gray-100 border-solid border-2 " onClick={menuHandle} 
      style={{top:topHead}}>
        <Menu className='w-5 h-5'/></div>
      :<div className=" w-6 h-12 bg-[#ff8367] absolute top-[40px] left-[-4px] rounded-2xl shadow-md shadow-orange-500 border-solid border-2 pt-3 " onClick={menuHandle} >
        <ChevronRight color="#ffff" />
          </div>}
        <h4 className="mx-2 mt-2 font-medium text-gray-800 ">{jwtDecode(localStorage.getItem('token'))?.name}</h4>
      </div>
            <div className="flex items-center space-x-4">
              <a href="/dashbord/notifications" className=" p-2 rounded-full hover:bg-gray-100 flex flex-row">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" />
                </svg>
              {countmsg?<div className={`rounded-full text-[12px] text-white bg-red-600 w-4 h-4 text-center relative z-50 left-[-7%]`}>{countmsg}</div>:''}
            
              </a>
              <button onClick={handleDownload} className="flex flex-col lg:flex-row items-center space-x-2 text-xs lg:text-lg">
                    <DownloadCloud />
                    <span>Emplois du temps</span>
              </button>
            </div>
          </div>
        </header>
        <div className="mt-1" >
          
            
          {children}

  
          </div>
        
        </div>
        </div>
        </div>
      
  );}
}
